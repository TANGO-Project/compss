#!/bin/bash -e

  #Obtain parameters
  COMPSs_exec=$1
  comm=$2
  runcompss_opts=$3
  base_app_dir=$4
  COMPSs_log_folder=$5
  target_log_folder=$6
  retryNum=$7

  #Global exit variable
  exitValue=0

  #----------------------------------------------------------------------------------
  #Generate Project.xml according to system
  sed -i '/<InstallDir>/c<InstallDir>'${COMPSS_HOME}'<\/InstallDir>' ${base_app_dir}/project.xml

  #----------------------------------------------------------------------------------
  #Create all working dir folders
  mkdir -p /tmp/COMPSsWorker01/

  #----------------------------------------------------------------------------------
  #Run application 1 - Test exception in Master before submitting tasks

  echo
  echo "*** RUNNING PYTHON APPLICATION TEST - EXCEPTIONS IN MASTER BEFORE SUBMITTING TASKS"

  function app1 {
      output_log="${target_log_folder}/exception_python_1${retryNum}.outputlog"
      error_log="${target_log_folder}/exception_python_1${retryNum}.errorlog"
      counterVal=1
      expectedTime=60s

      timeout --signal=2 $expectedTime ${COMPSs_exec} \
         --classpath=${base_app_dir} \
         --project=${base_app_dir}/project.xml \
         --resources=${base_app_dir}/resources.xml \
         --debug \
         --comm=$comm \
         ${runcompss_opts} \
         ${base_app_dir}/test/excInMasterBeforeTasks.py > >(tee ${output_log}) 2> >(tee ${error_log} >&2)

      #Check timeout
      if [[ "$?" = "124" ]]; then
         #Copy LOG files
         cp -rf ${COMPSs_log_folder}/excInMasterBeforeTasks.py_0${retryNum}/* ${target_log_folder}
         #Report timeout
         echo "[WARNING] Python Application timed out" >> ${output_log}
         exitValue=124
      else
         #Copy LOG files
         cp -rf ${COMPSs_log_folder}/excInMasterBeforeTasks.py_0${retryNum}/* ${target_log_folder}
         #Check result
         ${base_app_dir}/resultInMaster ${output_log} ${error_log} ${target_log_folder}
         exitValue=$?
      fi
  }

  # Kind of a try catch, but without else... allows to continue when the exeption are raised.
  if app1; then
    if [ $exitValue -eq "0" ]; then
      echo "Exception captured. Traceback and Exception message found - OK"
    else
      echo "The traceback or the exception message could not be found - ERROR"
      exit 1
    fi
  fi

  # wait for all processess to be killed by the OS
  sleep 10

  #----------------------------------------------------------------------------------
  #Run application 2 - Test exception in Master after submitting tasks before sync

  echo
  echo "*** RUNNING PYTHON APPLICATION TEST - EXCEPTIONS IN MASTER AFTER SUBMITTING TASKS BEFORE SYNC"

  function app2 {
      output_log="${target_log_folder}/exception_python_2${retryNum}.outputlog"
      error_log="${target_log_folder}/exception_python_2${retryNum}.errorlog"
      counterVal=1
      expectedTime=60s

      timeout --signal=2 $expectedTime ${COMPSs_exec} \
         --classpath=${base_app_dir} \
         --project=${base_app_dir}/project.xml \
         --resources=${base_app_dir}/resources.xml \
         --debug \
         --comm=$comm \
         ${runcompss_opts} \
         ${base_app_dir}/test/excInMasterAfterTasks1.py > >(tee ${output_log}) 2> >(tee ${error_log} >&2)

      #Check timeout
      if [[ "$?" = "124" ]]; then
         #Copy LOG files
         cp -rf ${COMPSs_log_folder}/excInMasterAfterTasks1.py_0${retryNum}/* ${target_log_folder}
         #Report timeout
         echo "[WARNING] Python Application timed out" >> ${output_log}
         exitValue=124
      else
         #Copy LOG files
         cp -rf ${COMPSs_log_folder}/excInMasterAfterTasks1.py_0${retryNum}/* ${target_log_folder}
         #Check result
         ${base_app_dir}/resultInMasterAfterTasks1 ${output_log} ${error_log} ${target_log_folder}
         exitValue=$?
      fi
  }

  # Kind of a try catch, but without else... allows to continue when the exeption are raised.
  if app2; then
    if [ $exitValue -eq "0" ]; then
      echo "Exception captured. Traceback and Exception message found - OK"
    else
      echo "The traceback or the exception message could not be found - ERROR"
      exit 1
    fi
  fi

  # wait for all processess to be killed by the OS
  sleep 10

  #----------------------------------------------------------------------------------
  #Run application 3 - Test exception in Master after submitting tasks before sync

  echo
  echo "*** RUNNING PYTHON APPLICATION TEST - EXCEPTIONS IN MASTER AFTER SUBMITTING TASKS AFTER SYNC"

  function app3 {
      output_log="${target_log_folder}/exception_python_3${retryNum}.outputlog"
      error_log="${target_log_folder}/exception_python_3${retryNum}.errorlog"
      counterVal=1
      expectedTime=60s

      timeout --signal=2 $expectedTime ${COMPSs_exec} \
         --classpath=${base_app_dir} \
         --project=${base_app_dir}/project.xml \
         --resources=${base_app_dir}/resources.xml \
         --debug \
         --comm=$comm \
         ${runcompss_opts} \
         ${base_app_dir}/test/excInMasterAfterTasks2.py > >(tee ${output_log}) 2> >(tee ${error_log} >&2)

      #Check timeout
      if [[ "$?" = "124" ]]; then
         #Copy LOG files
         cp -rf ${COMPSs_log_folder}/excInMasterAfterTasks2.py_0${retryNum}/* ${target_log_folder}
         #Report timeout
         echo "[WARNING] Python Application timed out" >> ${output_log}
         exitValue=124
      else
         #Copy LOG files
         cp -rf ${COMPSs_log_folder}/excInMasterAfterTasks2.py_0${retryNum}/* ${target_log_folder}
         #Check result
         ${base_app_dir}/resultInMasterAfterTasks2 ${output_log} ${error_log} ${target_log_folder}
         exitValue=$?
      fi
  }

  # Kind of a try catch, but without else... allows to continue when the exeption are raised.
  if app3; then
    if [ $exitValue -eq "0" ]; then
      echo "Exception captured. Traceback and Exception message found - OK"
    else
      if [ $exitValue -eq "1" ]; then
          echo "The traceback or the exception message could not be found - ERROR"
          exit 1
      else
          echo "Invalid application result - ERROR"
          exit 1
      fi
    fi
  fi

  #----------------------------------------------------------------------------------
  echo "---------------------------------"
  echo "--------   RESUME   -------------"
  echo "---------------------------------"
  echo "Exceptions at master before submitting tasks: OK"
  echo "Exceptions at master after submitting tasks before sync: OK"
  echo "Exceptions at master after submitting tasks after sync: OK"
  echo "---------------------------------"
  echo "---------------------------------"

  #----------------------------------------------------------------------------------
  #Return execution status
  exit $exitValue
